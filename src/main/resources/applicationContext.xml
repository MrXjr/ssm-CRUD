<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--spring希望控制所有的业务逻辑组件-->
    <context:component-scan base-package="com.atguigu.ssm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>



    <!--引入数据库配置文件-->
    <context:property-placeholder location="classpath:dbconfig.properties"></context:property-placeholder>

    <!--    spring用来控制业务逻辑，数据源，事务控制，aop-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
    </bean>

    <!--事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--将连接池交给事务管理器管理-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--配置切入点和切面（可以在哪些方法上增强，也就是可以在哪些方法上添加事务）-->
    <aop:config>
        <!--配置切入点 第一个..表示所有路径，*表示所有类，第二个..表示任意参数-->
        <aop:pointcut id="pt" expression="execution(* com.atguigu.ssm.service..*(..))"/>
        <!--配置切面（把增强部分加在被加强方法上面的操作过程，这里是添加事务的操作）-->
        <aop:advisor advice-ref="txadvice" pointcut-ref="pt"></aop:advisor>
    </aop:config>

    <!--配置通知（增强部分，这里就是添加事务）-->
    <tx:advice id="txadvice">
        <!-- 配置事务参数-->
        <tx:attributes>
            <!--指定哪种规则的方法上面添加事务-->
            <!--<tx:method name="accountMoney" propagation="REQUIRED" isolation="REPEATABLE_READ"/>-->
            <!-- account*表示以account开头的方法都添加事务-->
            <!--<tx:method name="account*"/>-->
            <tx:method name="*"></tx:method>
            <tx:method name="get*" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>

    <!--日志-->
    <!-- 使用xml配置aop ,引入AOP的命名空间-->
    <bean id="logInterceptor" class="com.atguigu.ssm.interceptor.LogInterceptor"></bean>
    <!-- 强制使用cglib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口的 -->
    <aop:config proxy-target-class="true" />
    <aop:config>
        <!--定义切面-->
        <aop:aspect id="logAspect" ref="logInterceptor">
            <!--定义切入点-->
            <aop:pointcut expression="execution(* com.atguigu.ssm.dao..*(..))"  id="logPointCut"/>
            <!--方法执行之前被调用执行的-->
            <!--<aop:before method="before" pointcut-ref="logPointCut"/>&lt;!&ndash;一个切入点的引用&ndash;&gt;-->
            <!--<aop:after method="after" pointcut-ref="logPointCut"/>&lt;!&ndash;一个切入点的引用&ndash;&gt;-->
            <!--<aop:after-throwing method="afterThrowing" pointcut-ref="logPointCut" />-->
            <!--<aop:after-returning method="afterReturn" pointcut-ref="logPointCut" />-->
            <aop:around method="around" pointcut-ref="logPointCut"/>
        </aop:aspect>
    </aop:config>



    <!--开启基于注解的事务-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>


    <!--整合MyBatis
            目的：1.spring管理所有组件。mapper的实现类
                    service==》Dao @Autowired:自动注入mapper
                 2.spring用来管理事务，spring声明式事务
    -->
    <!--创建出SqlSessionFactory对象-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源，这个原本写在MyBatis的全局配置文件中-->
        <property name="dataSource" ref="dataSource"></property>
        <!--指定MyBatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--指定mapper.xml文件的位置-->
        <property name="mapperLocations" value="classpath:mybatis_mapper/*.xml"></property>
    </bean>

    <!--配置一个可以批量操作的sqlSession-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <!--使用sqlSessionFactoryBean的构造器来创建sqlSession-->
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactoryBean"></constructor-arg>
        <!--设置批量操作方式-->
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>
    <!--扫描所有的mapper接口的实现，让这些mapper能够自动注入（就是扫描所有接口，让他自动完成sqlSession的getMapper操作）-->
    <mybatis-spring:scan base-package="com.atguigu.ssm.dao"></mybatis-spring:scan>
</beans>